class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def is_ancestor(node1, node2) -> bool:
            if node1 is None:
                return False
            if node1 == node2:
                return True
            return is_ancestor(node1.left, node2) or is_ancestor(node1.right, node2)

        if root is None:
            return None

        if is_ancestor(root.left, p) and is_ancestor(root.right, q):
            return root
        if is_ancestor(root.left, q) and is_ancestor(root.right, p):
            return root

      
        if is_ancestor(root.left, p) and is_ancestor(root.left, q):
            return self.lowestCommonAncestor(root.left, p, q)

      
        if is_ancestor(root.right, p) and is_ancestor(root.right, q):
            return self.lowestCommonAncestor(root.right, p, q)

        
        if root == p or root == q:
            return root

        return None

root = TreeNode(1)
root.right = TreeNode(5)
root.left = TreeNode(7)
root.right.right = TreeNode(2)
root.right.left = TreeNode(9)

p = root.right.right  # node with value 2
q = root.right.left   # node with value 9

solution = Solution()
lca = solution.lowestCommonAncestor(root, p, q)
print(lca.val)  










        